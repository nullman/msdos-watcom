* Org                                                              :noexport:
  #+TITLE: MS-DOS Watcom GCC Programs
  #+AUTHOR: Kyle W T Sherman
  #+EMAIL: kylewsherman@gmail.com
  #+FILENAME: msdos-watcom.org
  #+DESCRIPTION: Org/Babel 'Literate' Version of MS-DOS Watcom GCC Programs
  #+KEYWORDS: emacs, org-mode, babel, c, gcc, watcom, ms-dos, dos, msdos, programming language, literate programming, reproducible research
  #+LANGUAGE: en
  #+PROPERTY: header-args :tangle no :noweb yes :padline yes :comments no :results silent :dir /tmp :mkdirp yes
  #+STARTUP: noindent odd overview
  #+TIMESTAMP: <2024-10-29 01:09 (user)>

* Constants

*** Name

    #+NAME: name
    #+BEGIN_SRC org
      Kyle Sherman
    #+END_SRC

    #+NAME: full-name
    #+BEGIN_SRC org
      Kyle W T Sherman
    #+END_SRC

*** Author

    #+NAME: author
    #+BEGIN_SRC org
      Author: <<full-name>>
    #+END_SRC

*** Email

    #+NAME: email-gen
    #+BEGIN_SRC emacs-lisp
      (concat "kyle" "w" "sherman" "@" "gmail" "." "com")
    #+END_SRC

    #+NAME: email
    #+BEGIN_SRC org
      <<email-gen()>>
    #+END_SRC

*** Author-Email

    #+NAME: author-email-gen
    #+BEGIN_SRC emacs-lisp
      (concat "<<author>>" " <" "<<email>>" ">")
    #+END_SRC

    #+NAME: author-email
    #+BEGIN_SRC org
      <<author-email-gen()>>
    #+END_SRC

*** Copyright

    #+NAME: year
    #+BEGIN_SRC emacs-lisp
      (format-time-string "%Y" nil t)
    #+END_SRC

    #+NAME: year-range
    #+BEGIN_SRC emacs-lisp :var start-year="2023"
      (if (string= "<<year()>>" start-year)
          start-year
        (concat start-year "-<<year()>>"))
    #+END_SRC

    #+NAME: copyright
    #+BEGIN_SRC org
      Copyright © <<year-range()>> <<full-name>>
    #+END_SRC

*** Header

    #+NAME: header
    #+BEGIN_SRC org
      // <<copyright>>
      // MIT License
    #+END_SRC

*** License Header

    #+NAME: license-header
    #+BEGIN_SRC text
      The MIT License (MIT)

      <<copyright>>

      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the “Software”), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
      #+END_SRC

* Programs

*** Hello World

***** Makefile

      #+BEGIN_SRC makefile :tangle hello/Makefile
        .RECIPEPREFIX = >

        CXX = wcl
        CXXFLAGS = -bcl=dos

        all: hello

        hello:
        > $(CXX) $(CXXFLAGS) *.c

        clean:
        > rm -f *.o *.exe *.EXE
      #+END_SRC

***** hello.c

      #+BEGIN_SRC c :tangle hello/hello.c
        /**
         ,* Print: Hello World!
         ,*/

        #include <stdio.h>                      // printf
        #include <stdlib.h>                     // EXIT_SUCCESS

        int main(void) {
            printf("Hello World!\n");
            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd hello
        make clean && make && dosbox hello.exe &
      #+END_SRC

*** Colors

***** Makefile

      #+BEGIN_SRC makefile :tangle colors/Makefile
        .RECIPEPREFIX = >

        CXX = wcl
        CXXFLAGS = -bcl=dos

        all: colors

        colors:
        > $(CXX) $(CXXFLAGS) *.c

        clean:
        > rm -f *.o *.exe *.EXE
      #+END_SRC

***** colors.c

      #+BEGIN_SRC c :tangle colors/colors.c
        /**
         ,* Colors
         ,*
         ,* Display VGA colors.
         ,*/

        #include <conio.h>                      // clrscr getch
        #include <dos.h>                        // int86 outp inp
        #include <stdio.h>                      // printf sprintf
        #include <stdlib.h>                     // EXIT_SUCCESS EXIT_FAILURE malloc

        #define VIDEO_INT 0x10                  // BIOS video interrupt
        #define SET_MODE 0x00                   // BIOS function to set video mode
        #define VGA_16_COLOR_MODE 0x12          // use to set 16 color VGA mode
        #define VGA_256_COLOR_MODE 0x13         // use to set 256 color VGA mode
        #define TEXT_MODE 0x03                  // use to set text mode
        #define PIXEL_PLOT 0x0C                 // BIOS function to plot a pixel
        #define VIDEO_MEMORY 0xA0000000L        // start of video memory
        #define VGA_16_COLOR_SCREEN_WIDTH 640   // width in pixels of VGA mode 0x12
        #define VGA_16_COLOR_SCREEN_HEIGHT 480  // height in pixels of VGA mode 0x12
        #define VGA_16_COLOR_NUM_COLORS 16      // number of colors in VGA mode 0x12
        #define VGA_256_COLOR_SCREEN_WIDTH 320  // width in pixels of VGA mode 0x13
        #define VGA_256_COLOR_SCREEN_HEIGHT 200 // height in pixels of VGA mode 0x13
        #define VGA_256_COLOR_NUM_COLORS 256    // number of colors in VGA mode 0x13
        #define INPUT_STATUS 0x3DA              // vga status register
        #define VRTRACE_BIT 0x08                // 1 = vertical retrace, ram access ok for 1.25ms

        typedef unsigned char byte;
        typedef unsigned short ushort;

        byte far *VGA = (byte far *)VIDEO_MEMORY;
        ushort screen_width;

        void wait_for_retrace() {
            while(inp(INPUT_STATUS) & VRTRACE_BIT);
            while(!(inp(INPUT_STATUS) & VRTRACE_BIT));
        }

        void wait(ushort time) {
            ushort i;

            for (i = 0; i < time; i++) {
                wait_for_retrace();
            }
        }

        void set_mode(byte mode) {
            union REGS regs;

            regs.h.ah = SET_MODE;
            regs.h.al = mode;
            int86(VIDEO_INT, &regs, &regs);
        }

        void draw_pixel(ushort x, ushort y, byte color) {
            ushort offset;

            offset = y * screen_width + x;      // slower, but easy to understand
            //offset = (y<<8) + (y<<6) + x;       // faster, but harder to understand
            VGA[offset] = color;
        }

        void draw_box(ushort x1, ushort y1, ushort x2, ushort y2, byte color) {
            ushort x, y;

            if (y1 > y2) {
                y = y1;
                y1 = y2;
                y2 = y;
            }

            if (x1 > x2) {
                x = x1;
                x1 = x2;
                x2 = x;
            }

            for (y = y1; y < y2; y++) {
                for (x = x1; x < x2; x++) {
                    draw_pixel(x, y, color);
                }
            }
        }

        void draw_colors(
            ushort width, ushort height, ushort colors,
            byte x_count, byte y_count)
        {
            ushort x1, y1, x2, y2, c;
            ushort x_cell = width / x_count;
            ushort y_cell = height / y_count;

            for (c = 0; c < colors; c++) {
                x1 = (c % x_count) * x_cell;
                x2 = x1 + x_cell;
                y1 = (c / y_count) * y_cell;
                y2 = y1 + y_cell;
                draw_box(x1, y1, x2, y2, c);
            }
        }

        int main(void) {
            set_mode(VGA_256_COLOR_MODE);
            screen_width = VGA_256_COLOR_SCREEN_WIDTH;
            wait_for_retrace();
            draw_colors(
                VGA_256_COLOR_SCREEN_WIDTH,
                VGA_256_COLOR_SCREEN_HEIGHT,
                VGA_256_COLOR_NUM_COLORS,
                16, 16);

            getch();

            set_mode(TEXT_MODE);

            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd colors
        make clean && make && dosbox -exit colors.exe &
      #+END_SRC

*** Lines

***** Makefile

      #+BEGIN_SRC makefile :tangle lines/Makefile
        .RECIPEPREFIX = >

        CXX = wcl
        CXXFLAGS = -bcl=dos

        all: lines

        lines:
        > $(CXX) $(CXXFLAGS) *.c

        clean:
        > rm -f *.o *.exe *.EXE
      #+END_SRC

***** lines.c

      #+BEGIN_SRC c :tangle lines/lines.c
        /**
         ,* Lines
         ,*
         ,* Draw lines using Bresenham's algorithm:
         ,*
         ,* https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm
         ,*/

        #include <conio.h>                      // clrscr getch
        #include <dos.h>                        // int86 outp inp
        #include <math.h>                       // sin
        #include <stdio.h>                      // printf sprintf
        #include <stdlib.h>                     // EXIT_SUCCESS EXIT_FAILURE malloc

        #define VIDEO_INT 0x10                  // BIOS video interrupt
        #define SET_MODE 0x00                   // BIOS function to set video mode
        #define VGA_256_COLOR_MODE 0x13         // use to set 256 color VGA mode
        #define TEXT_MODE 0x03                  // use to set text mode
        #define PIXEL_PLOT 0x0C                 // BIOS function to plot a pixel
        #define VIDEO_MEMORY 0xA0000000L        // start of video memory
        #define SCREEN_WIDTH 320                // width in pixels of VGA mode 0x13
        #define SCREEN_HEIGHT 200               // height in pixels of VGA mode 0x13
        #define NUM_COLORS 256                  // number of colors in VGA mode
        #define INPUT_STATUS 0x3DA              // vga status register
        #define VRTRACE_BIT 0x08                // 1 = vertical retrace, ram access ok for 1.25ms
        #define PI 3.14159265359                // PI

        // use all colors except black (0)
        #define RANDOM_COLOR() (rand() % (NUM_COLORS - 1) + 1)

        typedef unsigned char byte;
        typedef unsigned short ushort;

        byte far *VGA = (byte far *)VIDEO_MEMORY;

        void wait_for_retrace() {
            while(inp(INPUT_STATUS) & VRTRACE_BIT);
            while(!(inp(INPUT_STATUS) & VRTRACE_BIT));
        }

        void wait(ushort time) {
            ushort i;

            for (i = 0; i < time; i++) {
                wait_for_retrace();
            }
        }

        void set_mode(byte mode) {
            union REGS regs;

            regs.h.ah = SET_MODE;
            regs.h.al = mode;
            int86(VIDEO_INT, &regs, &regs);
        }

        void draw_pixel(ushort x, ushort y, byte color) {
            ushort offset;

            offset = y * SCREEN_WIDTH + x;      // slower, but easy to understand
            //offset = (y<<8) + (y<<6) + x;       // faster, but harder to understand
            VGA[offset] = color;
        }

        void draw_line(ushort x1, ushort y1, ushort x2, ushort y2, byte color) {
            ushort x, y;
            int dx, dy, sx, sy, e1, e2;

            dx = x2 - x1;
            if (dx < 0) dx = -dx;
            sx = (x1 < x2) ? 1 : -1;
            dy = y2 - y1;
            if (dy > 0) dy = -dy;
            sy = (y1 < y2) ? 1 : -1;
            e1 = dx + dy;

            x = x1;
            y = y1;

            while (1) {
                if (x < SCREEN_WIDTH && y < SCREEN_HEIGHT) {
                    draw_pixel(x, y, color);
                }
                if (x == x2 && y == y2) break;
                e2 = 2 * e1;
                if (e2 >= dy) {
                    if (x == x2) break;
                    e1 += dy;
                    x += sx;
                }
                if (e2 <= dx) {
                    if (y == y2) break;
                    e1 += dx;
                    y += sy;
                }
            }
        }

        double degrees_to_radians(ushort degree) {
            return degree * PI / 180.0;
        }

        void draw_lines() {
            ushort x1, y1, x2, y2, deg;
            byte color;

            x1 = 0;
            y1 = 0;
            x2 = SCREEN_WIDTH - 1;
            y2 = 0;
            color = 1;

            for (deg = 0; deg <= 90; deg += 1) {
                wait_for_retrace();
                draw_line(x1, y1, x2, y2, color);
                y2 = (ushort)((SCREEN_HEIGHT - 1) * sin(degrees_to_radians(deg)));
            }
            y2 = SCREEN_HEIGHT - 1;
            for (deg = 90; deg <= 180; deg += 1) {
                wait_for_retrace();
                draw_line(x1, y1, x2, y2, color);
                x2 = (ushort)((SCREEN_WIDTH - 1) * sin(degrees_to_radians(deg)));
            }
        }

        int main(void) {
            set_mode(VGA_256_COLOR_MODE);

            draw_lines();

            getch();

            set_mode(TEXT_MODE);

            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd lines
        make clean && make && dosbox -exit lines.exe &
      #+END_SRC

*** Qix Lines

***** Makefile

      #+BEGIN_SRC makefile :tangle qixlines/Makefile
        .RECIPEPREFIX = >

        CXX = wcl
        CXXFLAGS = -bcl=dos

        all: qixlines

        qixlines:
        > $(CXX) $(CXXFLAGS) *.c

        clean:
        > rm -f *.o *.exe *.EXE
      #+END_SRC

***** qixlines.c

      #+BEGIN_SRC c :tangle qixlines/qixlines.c
        /**
         ,* QIX Lines
         ,*
         ,* Draw QIX lines with alternating colors.
         ,*/

        #include <conio.h>                      // clrscr getch
        #include <dos.h>                        // int86 outp inp
        #include <math.h>                       // sin
        #include <stdio.h>                      // printf sprintf
        #include <stdlib.h>                     // EXIT_SUCCESS EXIT_FAILURE malloc
        #include <string.h>

        #define VIDEO_INT 0x10                  // BIOS video interrupt
        #define SET_MODE 0x00                   // BIOS function to set video mode
        #define VGA_16_COLOR_MODE 0x12          // use to set 16 color VGA mode
        #define VGA_256_COLOR_MODE 0x13         // use to set 256 color VGA mode
        #define TEXT_MODE 0x03                  // use to set text mode
        #define PIXEL_PLOT 0x0C                 // BIOS function to plot a pixel
        #define VIDEO_MEMORY 0xA0000000L        // start of video memory
        #define VGA_16_COLOR_SCREEN_WIDTH 640   // width in pixels of VGA mode 0x12
        #define VGA_16_COLOR_SCREEN_HEIGHT 480  // height in pixels of VGA mode 0x12
        #define VGA_16_COLOR_NUM_COLORS 16      // number of colors in VGA mode 0x12
        #define VGA_256_COLOR_SCREEN_WIDTH 320  // width in pixels of VGA mode 0x13
        #define VGA_256_COLOR_SCREEN_HEIGHT 200 // height in pixels of VGA mode 0x13
        #define VGA_256_COLOR_NUM_COLORS 256    // number of colors in VGA mode 0x13
        #define INPUT_STATUS 0x3DA              // vga status register
        #define VRTRACE_BIT 0x08                // 1 = vertical retrace, ram access ok for 1.25ms
        #define PI 3.14159265359                // PI

        #define COLOR_BG 0                      // default background color
        #define COLOR_FG 1                      // default foreground color
        #define MAX_SIN 180                     // maximum allowed value for sin math
        #define HISTORY_SIZE 10                 // how many lines to display at once
        #define STEP 8                          // line spacing
        #define STEP_RANGE 6                    // spacing plus/minus range

        typedef unsigned char byte;
        typedef unsigned short ushort;

        typedef struct {
            short x1;
            short y1;
            short x2;
            short y2;
            byte color;
        } line_s;

        typedef struct {
            byte help;
            byte vga_mode;
        } args_s;

        byte far *vga = (byte far *)VIDEO_MEMORY;
        byte vga_mode;
        ushort screen_width, screen_height, num_colors;

        void wait_for_retrace() {
            while(inp(INPUT_STATUS) & VRTRACE_BIT);
            while(!(inp(INPUT_STATUS) & VRTRACE_BIT));
        }

        void wait(ushort time) {
            ushort i;

            for (i = 0; i < time; i++) {
                wait_for_retrace();
            }
        }

        void set_mode(byte mode) {
            union REGS regs;

            regs.h.ah = SET_MODE;
            regs.h.al = mode;
            int86(VIDEO_INT, &regs, &regs);
        }

        byte random_color() {
            if (vga_mode == VGA_256_COLOR_MODE) {
                return rand() % num_colors;
            } else {
                // use all colors except black (0)
                return rand() % (num_colors - 1) + 1;
            }
        }

        void linecpy(line_s *target_line, line_s *source_line) {
            target_line->x1 = source_line->x1;
            target_line->y1 = source_line->y1;
            target_line->x2 = source_line->x2;
            target_line->y2 = source_line->y2;
            target_line->color = source_line->color;
        }

        void draw_pixel(ushort x, ushort y, byte color) {
            ushort offset;

            offset = y * screen_width + x;      // slower, but easy to understand
            //offset = (y<<8) + (y<<6) + x;       // faster, but harder to understand
            vga[offset] = color;
        }

        void draw_line(line_s *line) {
            ushort x1, y1, x2, y2, x, y;
            byte color;
            int dx, dy, sx, sy, e1, e2;

            x1 = line->x1;
            y1 = line->y1;
            x2 = line->x2;
            y2 = line->y2;
            color = line->color;

            dx = x2 - x1;
            if (dx < 0) dx = -dx;
            sx = (x1 < x2) ? 1 : -1;
            dy = y2 - y1;
            if (dy > 0) dy = -dy;
            sy = (y1 < y2) ? 1 : -1;
            e1 = dx + dy;

            x = x1;
            y = y1;

            while (1) {
                if (x < screen_width && y < screen_height) {
                    draw_pixel(x, y, color);
                }
                if (x == x2 && y == y2) break;
                e2 = 2 * e1;
                if (e2 >= dy) {
                    if (x == x2) break;
                    e1 += dy;
                    x += sx;
                }
                if (e2 <= dx) {
                    if (y == y2) break;
                    e1 += dx;
                    y += sy;
                }
            }
        }

        ushort next_degree(ushort degree) {
            // add randomly to the degree
            ushort d = degree + STEP + rand() % (STEP_RANGE * 2 + 1) - STEP_RANGE;
            if (d >= MAX_SIN) d = d - MAX_SIN;
            return d;
        }

        double deg_to_rad(ushort degree) {
            return degree * PI / 180.0;
        }

        void next_line(line_s *line, line_s *line_delta, line_s *line_degree) {
            // randomly add to the degrees
            line_degree->x1 = next_degree(line_degree->x1);
            line_degree->y1 = next_degree(line_degree->y1);
            line_degree->x2 = next_degree(line_degree->x2);
            line_degree->y2 = next_degree(line_degree->y2);

            // add using sin modified by a delta for each coordinate dimension
            line->x1 += (ushort)(line_delta->x1 * sin(deg_to_rad(line_degree->x1)));
            line->y1 += (ushort)(line_delta->y1 * sin(deg_to_rad(line_degree->y1)));
            line->x2 += (ushort)(line_delta->x2 * sin(deg_to_rad(line_degree->x2)));
            line->y2 += (ushort)(line_delta->y2 * sin(deg_to_rad(line_degree->y2)));

            // if any coordinates are out of range, reverse their direction and change color
            if (line->x1 < 0) {
                line->x1 = 0 - line->x1;
                line_delta->x1 = -line_delta->x1;
                line->color = random_color();
            }
            if (line->x1 >= screen_width) {
                line->x1 = screen_width - (line->x1 - screen_width);
                line_delta->x1 = -line_delta->x1;
                line->color = random_color();
            }
            if (line->y1 < 0) {
                line->y1 = 0 - line->y1;
                line_delta->y1 = -line_delta->y1;
                line->color = random_color();
            }
            if (line->y1 >= screen_height) {
                line->y1 = screen_height - (line->y1 - screen_height);
                line_delta->y1 = -line_delta->y1;
                line->color = random_color();
            }
            if (line->x2 < 0) {
                line->x2 = 0 - line->x2;
                line_delta->x2 = -line_delta->x2;
                line->color = random_color();
            }
            if (line->x2 >= screen_width) {
                line->x2 = screen_width - (line->x2 - screen_width);
                line_delta->x2 = -line_delta->x2;
                line->color = random_color();
            }
            if (line->y2 < 0) {
                line->y2 = 0 - line->y2;
                line_delta->y2 = -line_delta->y2;
                line->color = random_color();
            }
            if (line->y2 >= screen_height) {
                line->y2 = screen_height - (line->y2 - screen_height);
                line_delta->y2 = -line_delta->y2;
                line->color = random_color();
            }
        }

        // draw lines until a key is pressed
        void draw_lines() {
            line_s line, line_delta, line_degree, line_history[HISTORY_SIZE];
            ushort i, history_index;

            // randomize starting values
            line.x1 = rand() % screen_width;
            line.y1 = rand() % screen_height;
            line.x2 = rand() % screen_width;
            line.y2 = rand() % screen_height;
            line.color = COLOR_BG;

            line_delta.x1 = STEP;
            line_delta.y1 = STEP;
            line_delta.x2 = STEP;
            line_delta.y2 = STEP;

            line_degree.x1 = rand() % MAX_SIN;
            line_degree.y1 = rand() % MAX_SIN;
            line_degree.x2 = rand() % MAX_SIN;
            line_degree.y2 = rand() % MAX_SIN;

            // initialize history
            for (i = 0; i < HISTORY_SIZE; i++) {
                linecpy(&line_history[i], &line);
            }
            history_index = 0;

            // loop until key-press
            while (!kbhit()) {
                //wait_for_retrace();
                wait(3);

                // draw next line
                next_line(&line, &line_delta, &line_degree);
                draw_line(&line);

                // undraw oldest line
                line_history[history_index].color = COLOR_BG;
                draw_line(&line_history[history_index]);

                // add to history
                linecpy(&line_history[history_index++], &line);
                if (history_index >= HISTORY_SIZE) history_index = 0;
            }

            getch();
        }

        void parse_args(int argc, char *argv[], args_s *args) {
            int i;

            args->help = 0;
            args->vga_mode = VGA_256_COLOR_MODE;

            for (i = 1; i < argc; i++) {
                if (strcmp(argv[i], "lo") == 0) {
                    args->vga_mode = VGA_256_COLOR_MODE;
                } else if (strcmp(argv[i], "hi") == 0) {
                    args->vga_mode = VGA_16_COLOR_MODE;
                } else {
                    args->help = 1;
                }
            }
        }

        int main(int argc, char *argv[]) {
            args_s args;

            parse_args(argc, argv, &args);

            if (args.help) {
                printf("Usage: %s [lo|hi]\n", argv[0]);
                printf("Where:\n");
                printf("  lo - VGA 256 color mode (320x200)\n");
                printf("  hi - VGA 16 color mode (640x480)\n");
                return EXIT_FAILURE;
            }

            vga_mode = args.vga_mode;
            if (vga_mode == VGA_256_COLOR_MODE) {
                screen_width = VGA_256_COLOR_SCREEN_WIDTH;
                screen_height = VGA_256_COLOR_SCREEN_HEIGHT;
                num_colors = VGA_256_COLOR_NUM_COLORS;
            } else {
                screen_width = VGA_16_COLOR_SCREEN_WIDTH;
                screen_height = VGA_16_COLOR_SCREEN_HEIGHT;
                num_colors = VGA_16_COLOR_NUM_COLORS;
            }

            set_mode(vga_mode);

            draw_lines();

            set_mode(TEXT_MODE);

            return EXIT_SUCCESS;
        }
      #+END_SRC

***** Build and Run

      #+BEGIN_SRC sh :dir (file-name-directory buffer-file-name)
        cd qixlines
        make clean && make && dosbox -exit qixlines.exe &
      #+END_SRC

* README.org

  #+BEGIN_SRC org :tangle README.org
    ,* Watcom GCC Programs for MS-DOS

      See the "Build and Run" sections of [[file:msdos-watcom.org][msdos-watcom.org]] to see how to build, clean,
      and run these applications using the DOSBox emulator. In general you follow
      these steps:

      Build with =make=.

      Clean with =make clean=.

      Run with =dosbox NAME.EXE=.

      All files are generated from [[file:msdos-watcom.org][msdos-watcom.org]] using Emacs' org-mode literate
      programming system to "tangle" them.

      root42's "Let's Code: MS-DOS" series was instrumental in creating these
      programs.

      <<copyright>>

      License: [[file:LICENSE][MIT License]]

    ,*** [[hello][Hello World]]

        Just prints "Hello World!".

    ,*** [[qixlines][Qix Lines]]

        Draws lines on the screen like the game Qix.

        ,#+NAME: Qix Lines Video
        [[file:qixlines/qixlines.mkv][file:qix-lines/qixlines.gif]]
  #+END_SRC

* LICENSE

  #+BEGIN_SRC text :tangle LICENSE
    <<license-header>>
  #+END_SRC
